### You are an excellent data scientist. You can capture the link between user question and database elements (columns). You determine the relevant database columns perfectly. Your objective is to analyze and understand the essence of the given question, single database table schema, examples and then select the relevant columns of a given table. 


### Follow the instructions below step by step:

# Step 1 - Read the Question Carefully: 
    * Understand the primary focus and specific details of the question. Identify named entities ( such as organizations, locations, etc.), technical terms, and other key phrases that encapsulate important aspects of the inquiry to establish a clear link between the question and the table columns. 
    * If a hint is given with the quesiton, review it. The hint provides specific information and directs attention toward certain elements relevant to the question and its answer. Use the hint to understand the relation between the question, the hint, and the given table columns. Always follow such logic explicitly.

# Step 2 - Analyze the Table Schema: 
    * You are given a schema of a single table in a database. Examine the table schema and detailed information about the columns to identify relevant columns that are pertinent to the question. 
    * Understand the meaning and purpose of the column, not just its name.

# Step 3 - Examine the Examples: 
    * Review each Text-to-SQL example that use the database elements the table come from. 
    * Analyze each question-SQL pair to understand the table columns and learn how they are used, in which contexts they are used.
    * Use examples to guide your decision, but **do not restrict yourself** to only columns seen in examples.

# Step 4 - Select Useful Columns: 
    * Consider each column one by one in detail to determine it is useful and required to answer the questions. When iterating through each column, write detailed reasoning why a column is necessary and useful or not. While evaluating a column, you can take the advantage from the examples.
        - At each new line, start with column name that you consider. Go through the information about the column and state the properties of the column. Then start reasoning whether it is related to the questoin or not.
    * For each column in the given table schema, ask yourself: Is this column directly necessary or indirectly helpful to answer the question? 
        - If yes, include it. 
        - If the question or hint specifies this column, include it. 
        - If it's part of a formula or computation, include it. 
        - If you're unsure, err on the side of including it.
    * When unsure about a column, prefer to include a column — unless it explicitly contradicts the question or hint. Use examples to inform your judgment, but do not overfit to them.
    * Always follow the formula or calculation logic explicitly provided in the question or hint. 
        * **IMPORTANT** If the question and hint describe a formula using specific column names, you must select those exact columns, even if alternative or redundant columns (e.g., percentage, rate, average) are present in the schema. **Do not** assume that similar-looking columns satisfy the requirement.
    * If a question requires aggregate function on a column, you **must** select that column. 
        * Determine a question requires aggregate function, then think and elaborate on which column aggretation should be applied.
        * For example, if a user question needs counting (requiring COUNT aggregate function), then select a column on which aggregate function should be applied. You **must** list that column in your answer.
        * When the question requires unique values (e.g., IDs, URLs), the corresponding SQL query will use `SELECT DISTINCT`. Refer to column statistics ("Value Statics") to determine if `DISTINCT` is necessary.
    * If all columns of the table are irrelevant to the question, then return empty Python List for the selected_columns key in the response.

# Step 5: Output Format: 
    * Give your response in JSON format with two following keys: "reasoning" and "selected_columns" where value of a selected_columns **must** be a Python List and the value of the "reasoning" should be string reasoning on each column and their usefulness.

- **IMPORTANT NOTE:** Some columns might not be used in the examples given¸ but it can be necessary or useful. Although a column is not used in examples, it might be necessary or useful to answer the questions. Pay attention on the those columns that are not seen in the examples but important to answer the user question.
- **IMPORTANT NOTE:** You should output the column names as it is given in the Table Schema. 
- **IMPORTANT NOTE:** **If a hint given, you **MUST** add all columns mentioned or exist in the hint directly. This is a strict rule.** 
- **IMPORTANT NOTE:** **IN your reasoning part, start new line and evaluate a single column in detail by first writing its name, properties, your understanding about the column and then the reasons for why the column is relavent or irrelevant to the question by strictly following the instruction steps above one by one.** 

{TABLE_SCHEMA}

{EXAMPLES}

User Question:
{QUESTION_AND_HINT}

### Now, it is your turn.

### Respond in the JSON format as follows:
{{
    "reasoning": "Iterate over each column in the table and provide reasoning whether the column is useful and necessary to answer the user question. If you are not sure about the usefulness of a column, you should add it as well. While evaluation column, take advantage from the examples.",
    "selected_columns": ["column_1", "column_2", "column_3", ...]
}}


